# -*- coding: utf-8 -*-


import pygame as pig

pig.init()


display_width = 800
display_height = 600

gameDisplay = pig.display.set_mode((display_width,display_height))
pig.display.set_caption('matheeee')

black = (0,0,0)
white = (255,255,255)
red = (255,0,0)


clock = pig.time.Clock()



def text_objects(text, font):
    textSurface = font.render(text, True, black)
    return textSurface, textSurface.get_rect()
 
def message_display(text,pos_x,pos_y,size):
    largeText = pig.font.Font('freesansbold.ttf',size)
    TextSurf, TextRect = text_objects(text, largeText)
    TextRect.center = ((pos_x),(pos_y))
    gameDisplay.blit(TextSurf, TextRect)  



class event_queue():

    events =  pig.event.get() 
    
    @classmethod       
    def events_update(cls):
        cls.events = pig.event.get()
        
class label(event_queue):
    
    keys = { pig.K_1 : 1, pig.K_2 : 2, pig.K_3 : 3 , pig.K_4 : 4 , pig.K_5 :5 , pig.K_6 : 6, pig.K_7 : 7
            , pig.K_8 : 8 ,pig.K_9 : 9, pig.K_0 : 0}
    
    values = []
    
    def __init__(self, x,y, size = 50):
        
        self.x = x
        self.y = y
        self.size = size
      
        
    def fill_values(self):
        
        for event in event_queue.events:
            
            if event.type == pig.KEYDOWN:
                
                for taste in self.keys:
                    
                    if event.key == taste:
                        
                        self.values.append(self.keys[taste])
                        
                if event.key == pig.K_BACKSPACE:
                    try:
                        del self.values[-1]
                    except:
                        #index out of bounds
                        pass
                    
    def display(self):
        num = ''.join(str(i) for i in self.values)
        message_display(num, self.x,self.y, self.size)
        
    def delete(self):
        self.values[:] = []
       
  
def button(x,y,w,h, text, func = lambda : None, size = 30):
    #wenn innerhalb button
    mouse = pig.mouse.get_pos()
    
    
    if x+w > mouse[0] > x and y+h > mouse[1] > y:
        pig.draw.rect(gameDisplay, black,(x,y,w,h))
        
        #wenn gedrückt
        
        for event in event_queue.events:
            if event.type == pig.MOUSEBUTTONDOWN:
                
                func()
   
    else:
        #zeig den button
        pig.draw.rect(gameDisplay, red,(x,y,w,h))
        message_display(text,x+(w/2),y+(h/2),size)        


    
                      

def maindeco(func):
 
    
    def structure(owner):
        while 1:
            
            event_queue.events_update()
            for event in event_queue.events:        
    
                if event.type == pig.QUIT:
                    
                    pig.quit()
                    quit()
            
            gameDisplay.fill(white)
            func(owner)

            pig.display.update()      
            
            clock.tick(30)
    return structure


class interface():
    
    
    
    @maindeco
    def second_menue(self):
                       
        button( display_width*0.1, display_height*0.3, display_width*0.3125,display_height/6,'+', self.main_menue, size = 60)
        button( display_width*0.55, display_height*0.3, display_width*0.3125,display_height/6,'-', self. main_menue, size = 100)
        button( display_width*0.1, display_height*0.5, display_width*0.3125,display_height/6,'*', self.main_menue, size = 60)
        button( display_width*0.55, display_height*0.5, display_width*0.3125,display_height/6,'/', self.main_menue, size = 60)

    @maindeco   
    def main_menue(self):
        
        number = label(display_width*0.7, display_height*0.5, size = 20)
        
        number.fill_values()
        number.display()
        
        message_display('Hauptmenü', display_width*0.5, display_width*0.15, 58 )
        
        button( display_width*0.34375, display_height*0.4, display_width*0.3125,display_height/6,'Training', self.second_menue)
        button( display_width*0.34375, display_height*0.6, display_width*0.3125,display_height/6,'Training', self.second_menue)

       
blah = interface()

blah.main_menue()
 
pig.quit()
quit()



